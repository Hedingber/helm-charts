apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "grafana.fullname" . }}
  namespace: {{ template "grafana.namespace" . }}
  labels:
    app: {{ template "grafana.name" . }}
    chart: {{ template "grafana.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
{{- if .Values.plugins }}
  plugins: {{ join "," .Values.plugins }}
{{- end }}
  grafana.ini: |
{{- range $key, $value := index .Values "grafana.ini" }}
    [{{ $key }}]
    {{- range $elem, $elemVal := $value }}
    {{ $elem }} = {{ $elemVal }}
    {{- end }}
{{- end }}

{{- if .Values.datasources }}
{{ $root := . }}
  {{- range $key, $value := .Values.datasources }}
  {{ $key }}: |
{{ tpl (toYaml $value | indent 4) $root }}
  {{- end -}}
{{- end -}}

{{- if .Values.notifiers }}
  {{- range $key, $value := .Values.notifiers }}
  {{ $key }}: |
{{ toYaml $value | indent 4 }}
  {{- end -}}
{{- end -}}

{{- if .Values.dashboardProviders }}
  {{- range $key, $value := .Values.dashboardProviders }}
  {{ $key }}: |
{{ toYaml $value | indent 4 }}
  {{- end -}}
{{- end -}}

{{- if .Values.dashboards  }}
  download_dashboards.sh: |
    #!/usr/bin/env sh
    set -euf
    {{- if .Values.dashboardProviders }}
      {{- range $key, $value := .Values.dashboardProviders }}
        {{- range $value.providers }}
    mkdir -p {{ .options.path }}
        {{- end }}
      {{- end }}
    {{- end }}

  {{- range $provider, $dashboards := .Values.dashboards }}
    {{- range $key, $value := $dashboards }}
      {{- if (or (hasKey $value "gnetId") (hasKey $value "url")) }}
    curl -skf \
    --connect-timeout 60 \
    --max-time 60 \
      {{- if not $value.b64content }}
    -H "Accept: application/json" \
    -H "Content-Type: application/json;charset=UTF-8" \
      {{ end }}
    {{- if $value.url -}}{{ $value.url }}{{- else -}} https://grafana.com/api/dashboards/{{ $value.gnetId }}/revisions/{{- if $value.revision -}}{{ $value.revision }}{{- else -}}1{{- end -}}/download{{- end -}}{{ if $value.datasource }}| sed 's|\"datasource\":[^,]*|\"datasource\": \"{{ $value.datasource }}\"|g'{{ end }}{{- if $value.b64content -}} | base64 -d {{- end -}} \
    > /var/lib/grafana/dashboards/{{ $provider }}/{{ $key }}.json
      {{- end -}}
    {{- end }}
  {{- end }}
{{- end }}

{{- if .Values.dashboards  }}
  rm_provisioned_dashboards.sh: |
    #!/usr/bin/env sh

    cd /var/lib/grafana/dashboards

    # Exit if the directory isn't found.
    if (($?>0)); then
        echo "Can't find work dir... exiting"
        exit
    fi



  {{- range $provider, $dashboards := .Values.dashboards }}
    cd /var/lib/grafana/dashboards/{{ $provider }}

    # Exit if the directory isn't found.
    if [ $? -eq 0 ]; then
      DashboardNamesString="
        {{- $index := 0 -}}
        {{- range $dashboardName, $_ := $dashboards}}
          {{- if $index}} {{end -}}
            {{- $dashboardName -}}
          {{- end -}}
          {{- $index = $index + 1 -}}"
      for i in *; do
        if [[ ${DashboardNamesString} != *"$i"* ]]; then
          echo "Deleting: $i"
          # the next line is commented out.  Test it.  Then uncomment to removed the files
          # rm "$i"
        fi
      done
    fi
  {{- end }}
{{- end }}
